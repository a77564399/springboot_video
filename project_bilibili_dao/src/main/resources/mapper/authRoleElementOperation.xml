<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD MAPPER 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.project.bilibili.dao.AuthRoleElementOperationDao">

<!--   这个表是要查出这个角色对应的所有的操作：名称，code以及type-->
<!--    resultMap-->
    <!--        从operation和roleOperation两个表中联表查询，然后把operation中的操作信息赋值给roleOperation类中的相关字段AuthElementOperation。-->
    <resultMap id="AuthElementOperationResultMap" type="com.project.bilibili.domain.auth.AuthRoleElementOperation">
        <id column="id" property="id"></id>
        <id column="roleId" property="roleId"></id>
        <id column="elementOperationId" property="elementOperationId"></id>
        <association property="authElementOperation" javaType="com.project.bilibili.domain.auth.AuthElementOperation">
            <id column="elementName" property="elementName"></id>
            <id column="elementCode" property="elementCode"></id>
            <id column="operationType" property="operationType"></id>
        </association>
    </resultMap>

<!--    由于要进行二次封装，需要将获取到的数据封装到一个参数上，因此要借助resultMap-->
<select id="getRoleElementsByRoleIds" parameterType="java.util.Set" resultMap="AuthElementOperationResultMap">
    select
        areo.*,
        aeo.elementName,
        aeo.elementCode,
        aeo.operationType
    from
        t_auth_role_element_operation areo
        left join t_auth_element_operation aeo on areo.elementOperationId = aeo.id
    where
        areo.roleId in
        <foreach collection="roleSet" item="roleId" index="index" open="(" separator="," close=")">
            #{roleId}
        </foreach>
</select>

</mapper>